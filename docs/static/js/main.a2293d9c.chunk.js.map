{"version":3,"sources":["utils/parserList.ts","store/index.ts","components/ListCities.tsx","components/Weather.tsx","components/WeatherList.tsx","App.tsx","index.tsx"],"names":["parserListDays","list","filter","item","i","moment","dt_txt","format","API_KEY","process","url","create","setState","getState","cities","city","code","error","days","icon","humedity","temp","isLoading","getWeatherByCity","cityName","a","fetch","result","json","data","name","main","weather","humidity","getForecast","ListCities","getWeather","Grid","lg","md","xl","xs","Card","CardHeader","title","List","component","aria-label","map","value","key","ListItem","button","onClick","Divider","Weather","style","justifyContent","alignItems","textAlign","display","Avatar","height","width","alt","src","WeatherList","index","marginLeft","CardContent","useStore","useStoreWeather","useStyles","makeStyles","theme","root","paddingTop","paddingLeft","paddingRight","rootDashboard","padding","spacing","shiftContent","content","App","classes","citiesList","state","useEffect","className","container","color","CircularProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2293d9c.chunk.js","sourcesContent":["import moment from 'moment';\r\n\r\nexport const parserListDays = (list:any) => {\r\n    let daysWeather = list.filter((item:any, i: number) => {\r\n      return !i || moment(item.dt_txt).format(\"dddd\") !== moment(list[i - 1].dt_txt).format(\"dddd\");\r\n    });\r\n    \r\n    return daysWeather;\r\n}","import create,{ GetState, SetState } from 'zustand';\r\nimport { parserListDays } from '../utils/parserList';\r\nimport { WeatherState } from './types';\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\nconst url = 'https://api.openweathermap.org/data/2.5/'\r\n\r\nexport default create((setState: SetState<WeatherState>, getState: GetState<WeatherState>): WeatherState =>{\r\n    return{\r\n        cities: [\r\n            { city: 'Formosa', code: 'AR' },\r\n            { city: 'Buenos Aires', code: 'AR' },\r\n            { city: 'Mendoza', code: 'AR' },\r\n            { city: 'Tucuman', code: 'AR' },\r\n            { city: 'Cordoba', code: 'AR' },\r\n        ],\r\n        city: '',\r\n        error:false,\r\n        days: [],\r\n        icon: '',\r\n        humedity: 0,\r\n        temp: 0,\r\n        isLoading: false,\r\n\r\n\r\n        getWeatherByCity : async (cityName: string) => {\r\n            \r\n            setState({ \r\n                isLoading: true,\r\n            });\r\n\r\n            try {\r\n                const result = await fetch(`${url}weather?q=${cityName}&appid=${API_KEY}`);\r\n                const data = await result.json();\r\n                const { name ,main, weather } = data;\r\n                setState({ \r\n                    city :name,\r\n                    temp: main.temp, \r\n                    humedity: main.humidity, \r\n                    error:false,\r\n                    icon: weather[0].icon,\r\n                    isLoading:false \r\n                })\r\n            } catch (error) {\r\n                setState({ \r\n                    error:true,\r\n                    isLoading: false\r\n                })\r\n            }\r\n        },\r\n\r\n        getForecast : async (city:string) => {\r\n            setState({ isLoading: true });\r\n            try {\r\n                const data = await fetch(`${url}/forecast?q=${city}&units=metric&appid=${API_KEY}`);\r\n                const { list }= await data.json();\r\n                const days = parserListDays(list);\r\n                setState({ isLoading: false, days });\r\n            } catch (error) {\r\n                setState({ \r\n                    error:true,\r\n                    isLoading: false\r\n                })\r\n            }\r\n        }\r\n\r\n    }\r\n});","import React from 'react';\r\nimport { Card, CardHeader, Divider } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\n\r\n\r\ntype ListCitiesProps = {\r\n    cities:object[],\r\n    getWeather : (city:string) => void;\r\n}\r\n\r\n\r\n\r\nconst ListCities:React.FC<ListCitiesProps> = ({ cities, getWeather }) => {\r\n    return(\r\n        <Grid item lg={4} md={6} xl={3} xs={12}>\r\n            <Card>\r\n                <CardHeader\r\n                    title=\"Cities\"\r\n                />\r\n                <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                    {cities.map((value:any) =>( \r\n                        <div key={value.city}>\r\n                            <ListItem button  onClick={ () => getWeather(value.city) }>\r\n                                <span>{value.city}</span>\r\n                            </ListItem>\r\n                            <Divider/>\r\n                        </div>\r\n                    ))}\r\n                </List>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default ListCities;","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\ntype WeatherProps = {\r\n    city:string;\r\n    icon:string;\r\n    humedity:number;\r\n    temp:number\r\n}\r\n\r\nconst Weather:React.FC<WeatherProps>= ({city,icon,humedity,temp}) => {\r\n\r\n    return(\r\n        <div style={{justifyContent:'center',alignItems:'center'}}>\r\n            <h1 style={{textAlign:'center'}}>Weather in {city} </h1>\r\n            <div style={{display: 'flex',alignItems: 'center',justifyContent: 'center'}}>\r\n                <Avatar \r\n                    style={{height:100,width:100}}\r\n                    alt={icon}\r\n                    src={`https://openweathermap.org/img/wn/${icon}.png`} \r\n                />\r\n                <h1>{temp}Â°</h1>\r\n            </div>\r\n            <h3 style={{textAlign:'center'}}>Humedity {humedity}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Weather;","import React from 'react';\r\nimport {Card,CardContent,Avatar} from '@material-ui/core';\r\nimport moment from 'moment';\r\n\r\n\r\ntype WeatherListProps = {\r\n  days : object[]\r\n} \r\n\r\nconst WeatherList:React.FC<WeatherListProps> = ({days}) => {\r\n    return(\r\n        <div style={{display: 'flex',justifyContent:'center',alignItems:'center'}}>\r\n            {days.map((value:any,index:number) =>( \r\n                <Card style={{width:180,marginLeft:15,justifyContent:'center',alignItems:'center'}}\r\n                     key={index}>\r\n                  <CardContent>\r\n                    <h3>{moment(value.dt_txt).format('dddd')}</h3>\r\n                    <Avatar style={{height:50,width:50}}alt=\"Remy Sharp\" src={`http://openweathermap.org/img/wn/${value.weather[0].icon}.png`}  />\r\n                    <h3>{value.main.temp}Â°</h3>\r\n                  </CardContent>\r\n                </Card>\r\n            ))}\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default WeatherList;","import React,{ useEffect } from 'react';\r\nimport useStoreWeather from './store/';\r\nimport { makeStyles} from '@material-ui/core/styles';\r\nimport { Card } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport ListCities  from '../src/components/ListCities';\r\nimport Weather  from '../src/components/Weather';\r\nimport WeatherList  from '../src/components/WeatherList';\r\nconst [useStore] = useStoreWeather;\r\n\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const citiesList = useStore(state => state.cities);\r\n  const { city, icon, temp, humedity, days } = useStore(state => state);\r\n  const { getWeatherByCity, getForecast } = useStore(state => state);\r\n  const {isLoading,error} = useStore(state => state);\r\n\r\n\r\n  useEffect(()=>{\r\n    (async function(){\r\n      await getWeatherByCity('Formosa');\r\n      await getForecast('Formosa');\r\n    })()\r\n  },[])\r\n\r\n  const getWeatherCity = (city:string) => {\r\n    getWeatherByCity(city);\r\n    getForecast(city);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <main className={classes.content}>\r\n        <Grid container spacing={4}>\r\n          <ListCities \r\n            cities={citiesList}\r\n            getWeather={getWeatherCity}\r\n          />\r\n          <Grid item lg={8} md={12} xl={9} xs={12}>\r\n            {error ? <strong style={{color:'red'}}>Weather Api Not found</strong> : ''}\r\n            <Card>\r\n              {isLoading ? \r\n                <CircularProgress/>\r\n              :\r\n                <Weather \r\n                  city={city} \r\n                  icon={icon} \r\n                  temp={temp} \r\n                  humedity={humedity}\r\n                />  \r\n              }\r\n            </Card>\r\n            <h2 style={{color:'gray'}}>Next days in {city}</h2>\r\n            {isLoading ? \r\n              <CircularProgress/> \r\n            : \r\n              <WeatherList days={days}/>\r\n            }\r\n          </Grid>\r\n        </Grid>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root:{\r\n      paddingTop:56,\r\n      paddingLeft: 120,\r\n      paddingRight: 120,\r\n      height:'100%',\r\n  },\r\n  rootDashboard:{\r\n      padding:theme.spacing(4),\r\n  },\r\n  shiftContent: {\r\n    paddingLeft: 240,\r\n  },\r\n  content: {\r\n    height: '100%',\r\n  }\r\n}))\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}